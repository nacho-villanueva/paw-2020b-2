[{"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/App.js":"1","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/constants/Roles.js":"2","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/redux/actions/index.js":"3","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/reportWebVitals.js":"4","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/DashboardPage.js":"5","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/Test.js":"6","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/MyOrders.js":"7","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/LandingPage.js":"8","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/redux/index.js":"9","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/api/index.js":"10","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/NavBar.js":"11","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/redux/actions/actions.js":"12","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/api/CustomFields.js":"13","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/registration/ClinicRegistrationForm.js":"14","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/registration/RegisterPage.js":"15","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/registration/MedicRegistrationForm.js":"16","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/registration/PatientRegistrationForm.js":"17","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/index.js":"18","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/api/Auth.js":"19","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/inputs/SelectDaysHours.js":"20","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/inputs/TimeInput.js":"21","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/CreateOrder.js":"22","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/constants/Routes.js":"23","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/registration/MedicalFieldModal.js":"24","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/redux/reducers/index.js":"25","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/registration/InsurancePlanModal.js":"26","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/registration/StudyTypesModal.js":"27","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/inputs/ErrorFeedback.js":"28"},{"size":1547,"mtime":1616514355392,"results":"29","hashOfConfig":"30"},{"size":501,"mtime":1625022780973,"results":"31","hashOfConfig":"30"},{"size":866,"mtime":1624831537019,"results":"32","hashOfConfig":"30"},{"size":375,"mtime":1611602634276,"results":"33","hashOfConfig":"30"},{"size":912,"mtime":1613571449162,"results":"34","hashOfConfig":"30"},{"size":510,"mtime":1612485238712,"results":"35","hashOfConfig":"30"},{"size":57,"mtime":1612485238710,"results":"36","hashOfConfig":"30"},{"size":11478,"mtime":1624041803931,"results":"37","hashOfConfig":"30"},{"size":1095,"mtime":1613629614009,"results":"38","hashOfConfig":"30"},{"size":828,"mtime":1613629957569,"results":"39","hashOfConfig":"30"},{"size":2111,"mtime":1613631036415,"results":"40","hashOfConfig":"30"},{"size":482,"mtime":1613574573444,"results":"41","hashOfConfig":"30"},{"size":1436,"mtime":1625033842707,"results":"42","hashOfConfig":"30"},{"size":8859,"mtime":1625177667797,"results":"43","hashOfConfig":"30"},{"size":1353,"mtime":1613694810549,"results":"44","hashOfConfig":"30"},{"size":9734,"mtime":1625176023124,"results":"45","hashOfConfig":"30"},{"size":5086,"mtime":1624933678799,"results":"46","hashOfConfig":"30"},{"size":756,"mtime":1612485238713,"results":"47","hashOfConfig":"30"},{"size":9727,"mtime":1625036880332,"results":"48","hashOfConfig":"30"},{"size":3334,"mtime":1625036972521,"results":"49","hashOfConfig":"30"},{"size":2213,"mtime":1625031500064,"results":"50","hashOfConfig":"30"},{"size":44108,"mtime":1613571449195,"results":"51","hashOfConfig":"30"},{"size":1325,"mtime":1613571449195,"results":"52","hashOfConfig":"30"},{"size":1825,"mtime":1625032295103,"results":"53","hashOfConfig":"30"},{"size":1043,"mtime":1625020475781,"results":"54","hashOfConfig":"30"},{"size":1824,"mtime":1625033371605,"results":"55","hashOfConfig":"30"},{"size":1824,"mtime":1625032546491,"results":"56","hashOfConfig":"30"},{"size":276,"mtime":1625175149970,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},"6gzxwc",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"68"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"78"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"78"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/App.js",["129"],"import LandingPage from \"./components/LandingPage.js\";\r\nimport DashboardPage from \"./components/DashboardPage\";\r\nimport \"./App.css\";\r\n\r\nimport \"./css/bootstrap-related.css\";\r\nimport { BrowserRouter as Router, Switch, Route, Redirect} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {store} from \"./redux\";\r\nimport {StatusType} from \"./redux/actions/actions\";\r\nimport {Roles} from \"./constants/Roles\";\r\nimport RegisterPage from \"./components/registration/RegisterPage\";\r\n\r\nfunction App() {\r\n  const status = useSelector(state => state.auth.status);\r\n  const role = useSelector(state => state.auth.role);\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"main-container\">\r\n        <div className=\"wrapper\">\r\n          <Switch>\r\n\r\n            <Route path=\"/\" exact>\r\n              {status === StatusType.AUTHENTICATED ? (role === Roles.UNREGISTERED ? <Redirect to={\"/register\"}/> : <Redirect to=\"/dashboard\" />) : <LandingPage />}\r\n            </Route>\r\n            {status === StatusType.DE_AUTHENTICATED && <Redirect to={\"/\"} />}\r\n\r\n            {status === StatusType.AUTHENTICATED && role !== Roles.UNREGISTERED && <Route path=\"/dashboard\" component={DashboardPage}/>}\r\n            {/*{status === StatusType.AUTHENTICATED && role === Roles.UNREGISTERED && <Route path=\"/register\" component={RegisterPage}/>}*/}\r\n            <Route path=\"/register\" component={RegisterPage}/>\r\n            <Redirect from={\"*\"} to={\"/\"}/>\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",["130","131"],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/constants/Roles.js",[],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/redux/actions/index.js",[],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/reportWebVitals.js",[],["132","133"],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/DashboardPage.js",["134"],"import NavBar from \"./NavBar\";\r\nimport Sidebar from \"./Sidebar\";\r\n\r\nimport \"./Style/Dashboard.css\";\r\nimport {Route} from \"react-router-dom\";\r\nimport Test from \"./Test\";\r\nimport {useSelector} from \"react-redux\";\r\nimport CreateOrder from \"./CreateOrder\";\r\n\r\n\r\nconst DashboardPage = () => {\r\n    const roleType = useSelector(state => state.auth.role);\r\n\r\n    return(\r\n        <div className={\"dashboard\"}>\r\n            <NavBar />\r\n            <div className={\"dashboardWrapper\"}>\r\n                <Sidebar />\r\n                <div className={\"dashboardMainContainer\"}>\r\n                    <Route path=\"/dashboard/test\" component={Test}/>\r\n                    <Route path=\"/dashboard/search-clinic\" component={DashboardPage}/>\r\n                    <Route path=\"/dashboard/create-order\" component={CreateOrder}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DashboardPage;",["135","136"],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/Test.js",["137","138"],"import {useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {getAllRoutes} from \"../constants/Routes\";\r\nimport {Roles} from \"../constants/Roles\";\r\n\r\nconst Test = () => {\r\n\r\n    // const [data, setData] = useState({userId:null, id:null, title:null, completed:null});\r\n    //\r\n    // axios.get(\"https://jsonplaceholder.typicode.com/todos/1\").then(res => {setData(res.data)})\r\n    // getAllRoutes(Roles.PATIENT)\r\n    getAllRoutes(Roles.PATIENT);\r\n\r\n    return <h1> TESTING </h1>\r\n}\r\n\r\nexport default Test;","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/MyOrders.js",[],["139","140"],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/LandingPage.js",["141","142","143","144","145"],"import NavBar from \"./NavBar.js\";\r\nimport {Alert, Form, InputGroup} from \"react-bootstrap\";\r\nimport \"./Style/LandingPage.css\";\r\nimport {useState} from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nimport {useDispatch} from \"react-redux\";\r\nimport {registerUser, login} from \"../api/Auth\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nfunction LandingPage() {\r\n    //strings\r\n    const title1 = \"Welcome to\";\r\n    const title2 = \"MedTransfer\";\r\n    const loginButton = \"login\";\r\n    const emailLabel = \"Email address\";\r\n    const passwordLabel = \"Password\";\r\n    const rememberMeLabel = \"Remember Me\";\r\n    const submitLogin = \"Log In\";\r\n    const invalidEmail = \"Please input a correct email\";\r\n    const invalidPassword = \"Please input a correct password\";\r\n    const invalidRepeatPassword = \"Passwords do not match\";\r\n    const repeatPasswordLabel = \"Please repeat the Password\";\r\n    const submitRegister = \"Register\";\r\n\r\n    const register = \"register\";\r\n    const loginLink = \"/login\";\r\n    const registerLink = \"/register\";\r\n\r\n    const history = useHistory();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    //////////////////////////////////////////////////////////\r\n    //form validation\r\n\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    const onLoginSuccess = () => {\r\n        setLoginValidated(true);\r\n        setLoading(false)\r\n    }\r\n\r\n    const [invalidLogin, setInvalidLogin] = useState(false);\r\n\r\n    const onLoginFail = () => {\r\n        setInvalidLogin(true)\r\n        setLoginValidated(false);\r\n        setLoading(false)\r\n        setIsRegistered(false)\r\n    }\r\n\r\n    const [loginValidated, setLoginValidated] = useState(false);\r\n    const handleLoginSubmit = (event) => {\r\n        event.preventDefault();\r\n        const form = event.currentTarget;\r\n\r\n        const inputs = {\r\n            email: form[0],\r\n            password: form[1],\r\n            rememberMe: form[2],\r\n        }\r\n\r\n        if(form.checkValidity() === false) {\r\n            event.stopPropagation();\r\n        }else{\r\n            setInvalidLogin(false)\r\n            login(inputs.email.value, inputs.password.value, inputs.rememberMe.checked, onLoginSuccess, onLoginFail);\r\n            setLoading(true);\r\n        }\r\n    };\r\n\r\n    const [isRegistered, setIsRegistered] = useState(false);\r\n    const onRegisterSuccess = () => {\r\n        setRegisterValidated(true);\r\n        setLoading(false)\r\n        changeToLogin()\r\n        setIsRegistered(true)\r\n    }\r\n\r\n\r\n    const [registerErrors, setRegisterErrors] = useState({email:false, password:false, repeat: false});\r\n    const onRegisterFail = (errors) => {\r\n        setRegisterErrors({email: errors.email, password: errors.password, repeat: false})\r\n        setRegisterValidated(false);\r\n        setLoading(false)\r\n    }\r\n\r\n    const [registerValidated, setRegisterValidated] = useState(false);\r\n    const handleRegisterSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const form = event.currentTarget;\r\n        let formInputs = event.target;\r\n        //the first values in the object formInputs are the fields from the form, then its useless stuff\r\n        const inputs = {email: formInputs[0],\r\n                        password: formInputs[1],\r\n                        passwordConfirm: formInputs[2]}\r\n\r\n        /*\r\n        for(var i in inputs){\r\n            console.log(i, inputs[i].value);\r\n        }\r\n        */\r\n\r\n        if(form.checkValidity() === false || inputs.password.value !== inputs.passwordConfirm.value) {\r\n            if(inputs.password.value !== inputs.passwordConfirm.value){\r\n                setRegisterErrors({email: false, password:false, repeat: true})\r\n            }\r\n            event.stopPropagation();\r\n        }else{\r\n            registerUser(inputs.email.value, inputs.password.value, onRegisterSuccess, onRegisterFail);\r\n            setLoading(true);\r\n        }\r\n    };\r\n\r\n    //////////////////////////////////////////////////////////\r\n    //code to change between the login and register tabs\r\n\r\n    const [loginTab, setLoginTab] = useState(\"tab-pane fade in show active\");\r\n    const [registerTab, setRegisterTab] = useState(\"tab-pane fade in\");\r\n    const [activeLoginTab, setActiveLoginTab] = useState(\"active\");\r\n    const [activeRegisterTab, setActiveRegisterTab] = useState(\"\");\r\n\r\n    const changeToLogin = (event) => {\r\n        setLoginTab(\"tab-pane fade in show active\");\r\n        setRegisterTab(\"tab-pane fade in\");\r\n        setActiveLoginTab(\"active\");\r\n        setActiveRegisterTab(\"\");\r\n    };\r\n    const changeToRegister = (event) => {\r\n        setRegisterTab(\"tab-pane fade in show active\");\r\n        setLoginTab(\"tab-pane fade in\");\r\n        setActiveRegisterTab(\"active\");\r\n        setActiveLoginTab(\"\");\r\n    };\r\n\r\n    return(\r\n        <div className={\"landingContainer\"}>\r\n            <NavBar />\r\n            <div className=\"card main-card bg-light\">\r\n                <div className=\"card-body\">\r\n                    <h1 className=\"text-center text-highlight\">{title1}</h1>\r\n                    <h4 className=\"text-center text-highlight\">{title2}</h4>\r\n                    <hr className=\"divider my-4\"/>\r\n                    <ul className=\"nav nav-pills nav-justified\" id=\"myTab\" role=\"tablist\">\r\n                        <li className=\"nav-item\">\r\n                            <a className={\"nav-item nav-link \" + activeLoginTab} href={\"/#\"}\r\n                               id=\"login-tab\" data-toggle=\"tab\" role=\"tab\" onClick={changeToLogin}\r\n                               aria-controls=\"login\" aria-selected={activeLoginTab === 'active' ? \"true\" : \"false\" }>{loginButton}</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className={\"nav-item nav-link \" + activeRegisterTab} href={\"/#\"}\r\n                               id=\"register-tab\" data-toggle=\"tab\" onClick={changeToRegister}\r\n                               role=\"tab\" aria-controls=\"register\" aria-selected={activeRegisterTab === 'active'? \"true\" : \"false\"}>{register}</a>\r\n                        </li>\r\n                    </ul>\r\n\r\n                    <hr className=\"divider my-4\"/>\r\n\r\n                    <div className=\"tab-content\">\r\n                        <div id=\"login\" className={loginTab}>\r\n                            <Form className=\"form-signin\" noValidate validated={loginValidated} onSubmit={handleLoginSubmit}>\r\n                                <Alert show={invalidLogin} variant={'danger'}> Email/Password is invalid, please try again.</Alert>\r\n                                <Alert show={isRegistered} variant={'success'}> Registration Successful! Please verify your email before attempting to log in. </Alert>\r\n                                <Form.Group controlId=\"loginEmail\">\r\n                                    <Form.Label className=\"bmd-label-static\">{emailLabel}</Form.Label>\r\n                                    <Form.Control required type=\"email\" placeholder=\"Enter email\" name=\"email\"/>\r\n                                    <Form.Control.Feedback type=\"invalid\">{invalidEmail}</Form.Control.Feedback>\r\n                                </Form.Group>\r\n                                <Form.Group controlId=\"loginPassword\">\r\n                                    <Form.Label className=\"bmd-label-static\">{passwordLabel}</Form.Label>\r\n                                    <Form.Control required type=\"password\" placeholder=\"Password\" name=\"password\"/>\r\n                                    <Form.Control.Feedback type=\"invalid\">{invalidPassword}</Form.Control.Feedback>\r\n                                </Form.Group>\r\n\r\n\r\n                                <Form.Group controlId=\"loginRememberMe\">\r\n                                    <Form.Check type=\"checkbox\" className={\"muted\"} name={\"rememberme\"} label={rememberMeLabel} />\r\n                                </Form.Group>\r\n\r\n\r\n\r\n                                <div className=\"row justify-content-center\">\r\n                                    {\r\n                                        !isLoading &&\r\n                                        <input type=\"submit\" className=\"row btn btn-lg action-btn\" value={submitLogin}/>\r\n                                    }\r\n                                    {\r\n                                        isLoading &&\r\n                                        <Loader\r\n                                        className=\"row btn btn-lg action-btn\"\r\n                                        type=\"ThreeDots\"\r\n                                        color=\"#FFFFFF\"\r\n                                        height={\"25\"}\r\n                                        />\r\n                                    }\r\n                                </div>\r\n                            </Form>\r\n                        </div>\r\n\r\n\r\n                        <div id=\"register\" className={registerTab}>\r\n                            <Form noValidate validated={registerValidated} className=\"form-signin\" onSubmit={handleRegisterSubmit}>\r\n                                <Form.Group controlId=\"registerEmail\">\r\n                                    <Form.Label className=\"bmd-label-static\">{emailLabel}</Form.Label>\r\n                                    <Form.Control required type=\"email\" placeholder=\"Enter email\" name=\"email\" isInvalid={!!registerErrors.email}/>\r\n                                    <Form.Control.Feedback type=\"invalid\">{invalidEmail}</Form.Control.Feedback>\r\n                                </Form.Group>\r\n                                <Form.Group controlId=\"registerPassword\">\r\n                                    <Form.Label className=\"bmd-label-static\">{passwordLabel}</Form.Label>\r\n                                    <Form.Control required type=\"password\" placeholder=\"Password\" name=\"password\" isInvalid={registerErrors.password}/>\r\n                                    <Form.Control.Feedback type=\"invalid\">{invalidPassword}</Form.Control.Feedback>\r\n                                </Form.Group>\r\n                                <Form.Group controlId=\"registerPasswordConfirm\">\r\n                                    <Form.Label className=\"bmd-label-static\">{repeatPasswordLabel}</Form.Label>\r\n                                    <Form.Control required type=\"password\" placeholder=\"Repeat Password\" name=\"passwordConfirm\" isInvalid={registerErrors.repeat}/>\r\n                                    <Form.Control.Feedback type=\"invalid\">{invalidRepeatPassword}</Form.Control.Feedback>\r\n                                </Form.Group>\r\n\r\n                                <div className=\"row justify-content-center\">\r\n\r\n                                    {!isLoading && <input type=\"submit\" className=\"row btn btn-lg action-btn\"\r\n                                            value={submitRegister}/>}\r\n                                    {\r\n                                        isLoading &&\r\n                                        <Loader\r\n                                            className=\"row btn btn-lg action-btn\"\r\n                                            type=\"ThreeDots\"\r\n                                            color=\"#FFFFFF\"\r\n                                            height={\"25\"}\r\n                                        />\r\n                                    }\r\n                                </div>\r\n                            </Form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LandingPage;",["146","147"],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/redux/index.js",[],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/api/index.js",["148"],"import axios from \"axios\"\r\nimport {store} from \"../redux\"\r\nimport {StatusType} from \"../redux/actions/actions\";\r\nimport {logout} from \"./Auth\";\r\n\r\nconst settings = {\r\n    baseURL: 'http://127.0.0.1:8080/',\r\n    timeout: 30000,\r\n};\r\n\r\nconst apiInstance = axios.create(settings);\r\n\r\napiInstance.interceptors.request.use(function (config) {\r\n    if(store.getState().auth.token !== null)\r\n        config.headers[\"authorization\"] = \"Bearer \" + store.getState().auth.token;\r\n    return config\r\n})\r\n\r\nconst UNAUTHORIZED = 401;\r\napiInstance.interceptors.response.use(\r\n    response => response,\r\n    error => {\r\n        if (error.response.status === UNAUTHORIZED && error.response.headers[\"Token-Status\"] === \"Expired\") {\r\n            logout();\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default apiInstance;",["149","150"],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/NavBar.js",[],["151","152"],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/redux/actions/actions.js",[],["153","154"],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/api/CustomFields.js",["155","156"],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/registration/ClinicRegistrationForm.js",[],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/registration/RegisterPage.js",[],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/registration/MedicRegistrationForm.js",[],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/registration/PatientRegistrationForm.js",[],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/index.js",[],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/api/Auth.js",["157","158","159"],"import apiInstance from \"./\"\r\nimport {store} from \"../redux\";\r\nimport {authenticate, deAuthenticate, updateRole} from \"../redux/actions\";\r\nimport {Roles} from \"../constants/Roles\";\r\n\r\nexport function login(user, pass, rememberMe, onSuccess, onFail){\r\n\r\n    let expire = new Date();\r\n    if(rememberMe)\r\n        expire.setDate( expire.getDate() + 7);\r\n    else\r\n        expire.setHours( expire.getHours() + 12);\r\n    const expireEpoch = Math.floor( expire / 1000 );\r\n\r\n    apiInstance.post(\"/\", {\r\n        \"username\": user,\r\n        \"password\": pass\r\n    })\r\n        .then((r) => {\r\n            store.dispatch(authenticate(r.headers.authorization, expireEpoch));\r\n            onSuccess()\r\n        }).catch(onFail);\r\n}\r\n\r\nexport function registerUser(email, pass, onSuccess, onFail){\r\n\r\n    apiInstance.post(\"/users\",\r\n        {\r\n            \"email\": email,\r\n            \"password\": pass,\r\n            \"locale\": navigator.language\r\n        })\r\n        .then( (r) => {onSuccess()})\r\n        .catch((err) => {\r\n            let errors = {email: false, password: false}\r\n            if(err.response != null) {\r\n                for (const e of err.response.data) {\r\n                    switch (e.property) {\r\n                        case \"email\":\r\n                            errors.email = true;\r\n                            break;\r\n                        case \"password\":\r\n                            errors.password = true;\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            onFail(errors)\r\n        });\r\n\r\n}\r\n\r\nexport function registerPatient(name, insurancePlan, insuranceNumber, onSuccess, onFail){\r\n    apiInstance.post(\"/patients/\",\r\n        {\r\n            \"name\": name,\r\n            \"patientPlanInfo\": {\r\n                \"plan\": {\r\n                    \"id\": insurancePlan.id,\r\n                    \"name\": insurancePlan.name,\r\n                    \"url\": insurancePlan.url\r\n                },\r\n                \"number\": insuranceNumber\r\n            }\r\n        })\r\n        .then( (r) => {\r\n            store.dispatch(updateRole(Roles.PATIENT));\r\n            onSuccess()\r\n        }).catch((err) => {\r\n            onFail();\r\n        });\r\n}\r\n\r\nexport function registerMedic(medic, onSuccess, onFail){\r\n\r\n    apiInstance.post(\"/medics/\",\r\n        {\r\n            \"name\": medic.name,\r\n            \"telephone\": medic.telephone,\r\n            \"identification\": medic.identification,\r\n            \"licenceNumber\": medic.licenceNumber,\r\n            \"medicalFields\": medic.medicalFields\r\n        })\r\n        .then( (r) => {\r\n            store.dispatch(updateRole(Roles.MEDIC));\r\n            onSuccess();\r\n        }).catch((err) => {\r\n            let response = []\r\n            if(err.response != null)\r\n                response = err.response.data\r\n            onFail(response);\r\n        });\r\n}\r\n\r\nexport function registerClinic(clinic, onSuccess, onFail){\r\n    apiInstance.post(\"/clinics/\",\r\n        {\r\n            \"name\": clinic.name,\r\n            \"telephone\": clinic.phoneNumber,\r\n            \"availableStudies\": clinic.studyTypes,\r\n            \"acceptedPlans\": clinic.acceptedInsurance,\r\n            \"hours\": clinic.hours\r\n        })\r\n        .then( (r) => {\r\n            store.dispatch(updateRole(Roles.CLINIC));\r\n            onSuccess()\r\n        }).catch((err) => {\r\n            let response = []\r\n            if(err.response != null)\r\n                response = err.response.data\r\n            onFail(response);\r\n    });\r\n}\r\n\r\nexport function logout(){\r\n    store.dispatch(deAuthenticate());\r\n}\r\n\r\n\r\nexport function GetLoggedMedic(orderInfo, setOrderInfo, count, setCount){\r\n    apiInstance.get( \"/medics/\" + store.getState().auth.userId )\r\n    .then((r) => {\r\n        orderInfo.medicName = r.data.name;\r\n        orderInfo.medicEmail = store.getState().auth.email;\r\n        orderInfo.medicLicenceNumber = r.data.licenceNumber;\r\n        orderInfo.identificationSrc = r.data.identification;\r\n        setOrderInfo(orderInfo);\r\n        setCount(count+2);\r\n    })\r\n    .catch();\r\n}\r\n\r\nexport function FindPatient(patientEmail, count, setCount, patientInfo, setPatientInfo){\r\n    //i need a way to lookUp patients by email, currently there is no way to do that...\r\n    //unless i use listUsers and look through that whole thing\r\n    let output = {\r\n        error: false,\r\n        patientName: '',\r\n        patientInsurance: {\r\n            plan: '',\r\n            number: ''\r\n        }\r\n    }\r\n\r\n    apiInstance.get( \"/patients\" + \"?email=\" + encodeURIComponent(patientEmail))\r\n    .then((r) => {\r\n        let out = patientInfo;\r\n        out.email = patientEmail;\r\n        out.name = r.data.name;\r\n        out.insurance.number = r.data.medicPlanNumber;\r\n        out.insurance.plan= r.data.medicPlan;\r\n        out.error = false;\r\n        out.loading = false;\r\n        console.log(out);\r\n        setPatientInfo(out);\r\n        setCount(count+4);\r\n\r\n    })\r\n    .catch((e) => {\r\n        let out = patientInfo;\r\n        patientInfo.email = patientEmail;\r\n        patientInfo.error = true;\r\n        patientInfo.loading = false;\r\n\r\n        setPatientInfo(patientInfo);\r\n        setCount(count+4);\r\n    });\r\n}\r\n\r\nexport function GetStudyTypes(setStudyTypesList, count, setCount){\r\n    apiInstance.get(\"/study-types\")\r\n    .then((r) => {\r\n        let stl = [];\r\n        for(var idx in r.data){\r\n            stl[idx] = {name: r.data[idx].name, id: r.data[idx].id};\r\n        }\r\n        setStudyTypesList(stl);\r\n        setCount(count+1);\r\n    })\r\n    .catch((error) => {console.log(\"bruh\", error)});\r\n}\r\n\r\nasync function InternalQuery(request){\r\n    return apiInstance.get(request)\r\n    .then((r) => {\r\n        return r.data;\r\n    })\r\n    .catch((error) => {console.log(\"internalqueryError\", error)});\r\n}\r\n\r\nfunction checkUndefinedArray(array){\r\n    var count = 0;\r\n    for(var idx in array){\r\n        if(array[idx] !== undefined){\r\n            count++;\r\n        }\r\n    }\r\n    return (count > 0);\r\n}\r\n\r\nexport function QueryClinics(filters, setClinicsList, count, setCount, page, setTotalClinicPages){\r\n    let params = {\r\n        'page': page,\r\n        'days': filters.days,\r\n        'fromTime': filters.fromTime,\r\n        'toTime': filters.toTime,\r\n        'plan': filters.plan,\r\n        'study-type': filters.studyType,\r\n    };\r\n\r\n    if(filters.clinicName !== \"\"){\r\n        params['clinic'] =  filters.clinicName;\r\n    }\r\n\r\n    //manually serializing because jersey can't understand arrays otherwise\r\n    let serializedParams = \"\";\r\n    if(Object.keys(params).length !== 0){\r\n        serializedParams += \"?\";\r\n        for(var key of Object.keys(params)){\r\n            let param = params[key];\r\n            if(Array.isArray(param) && param && checkUndefinedArray(param)){\r\n                serializedParams += key + \"=\";\r\n                for(var idx in param){\r\n                    let element = (param[idx] !== 0 ? encodeURIComponent(param[idx]) : \"\") + (idx < (param.length - 1) ? \",\" : \"\");\r\n                    serializedParams += element;\r\n                }\r\n                serializedParams += \"&\";\r\n\r\n            }else if(param !== undefined){\r\n                serializedParams += key + \"=\" + encodeURIComponent(param);\r\n                serializedParams += \"&\";\r\n            }\r\n\r\n        }\r\n        serializedParams = serializedParams.slice(0, -1);\r\n    }\r\n\r\n    apiInstance.get(\"/clinics\" + serializedParams ).then((r) => {\r\n        //this is just horrible\r\n        if(r.status === 200){\r\n            let headerInfo = r.headers.link;\r\n            headerInfo = headerInfo.split(',');\r\n            headerInfo = headerInfo.pop().split('?').pop().split('>').reverse().pop().split('=').pop();\r\n            setTotalClinicPages(headerInfo);\r\n\r\n            let clinics = r.data;\r\n            let clinicsList = [];\r\n            for(var idx in clinics){\r\n                let clinic = {};\r\n                clinic[\"name\"]  = clinics[idx].name;\r\n                //clinic[\"email\"] = 'nothere@medtransfer.com';\r\n                clinic[\"hours\"] = clinics[idx].hours;\r\n                clinic[\"telephone\"] = clinics[idx].telephone;\r\n                //I NEED TO CALL UP THE API FOR SOME MORE INFO....\r\n                InternalQuery(clinics[idx].user).then(\r\n                    (response) => {\r\n                        clinic[\"email\"] = response.email;\r\n                    }\r\n                );\r\n                InternalQuery(clinics[idx].acceptedPlans).then(\r\n                    (response) => {\r\n                        clinic[\"acceptedPlans\"] = response;\r\n                    }\r\n                );\r\n                InternalQuery(clinics[idx].availableStudies).then(\r\n                    (response) => {\r\n                        clinic[\"medicalStudies\"] = response;\r\n                    }\r\n                );\r\n\r\n                clinic[\"userId\"] = clinics[idx].user.split('/').pop();\r\n\r\n                clinicsList[idx] = clinic;\r\n            }\r\n            setClinicsList(clinicsList);\r\n\r\n            //setCount(count+3);\r\n        }\r\n\r\n    })\r\n    .catch();\r\n}\r\n\r\nexport function CreateMedicalOrder(order){\r\n    apiInstance.post(\"/orders\",{\r\n        clinicId: order.clinicId,\r\n        patientEmail: order.patientEmail,\r\n        patientName: order.patientName,\r\n        studyTypeId: order.studyTypeId,\r\n        description: order.orderDescription,\r\n        medicPlan : {\r\n            plan: order.patientInsurancePlan,\r\n            number: order.patientInsuranceNumber\r\n        }\r\n    }).then((r) => {console.log(\"nice order\", r);})\r\n    .catch((error) => { console.log(\"OH NO\", error);});\r\n}\r\n\r\nexport function RegisterPatient(patient){\r\n\r\n}\r\n\r\nexport function RegisterMedic(medic){\r\n\r\n}\r\n\r\nexport function RegisterClinic(clinic){\r\n\r\n}","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/inputs/SelectDaysHours.js",[],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/inputs/TimeInput.js",[],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/CreateOrder.js",["160","161","162","163","164","165","166","167","168","169","170"],"import {Form, Button, Table, Collapse, Pagination, Spinner, Alert} from \"react-bootstrap\";\r\nimport {useState, useEffect} from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {GetLoggedMedic, GetStudyTypes, QueryClinics, CreateMedicalOrder, FindPatient} from \"../api/Auth\";\r\n\r\nimport \"./Style/CreateOrder.css\";\r\nimport { store } from \"../redux\";\r\n\r\nfunction CreateOrder(){\r\n\r\n    const history = useHistory();\r\n\r\n    /*******************************\r\n    **DATA\r\n    *******************************/\r\n    const infoSubmit=\"bubba\";\r\n    const clinicSubmit=\"newgrounds forever\";\r\n    const verifySubmit=\"this man... this is a wonderful man\";\r\n    //DUMMY DATA (in the real version these should be made with useState to update and render the site)\r\n    /*\r\n    const clinicsList = [\r\n        {\r\n            userId: 1,\r\n            name:\"Anisa Sanusi's Sanatory\",\r\n            email:\"ass@medtransfer.com\",\r\n            telephone:\"911212155\",\r\n            hours: {\r\n                //sun, mon, tue, wed, thr, fri, sat\r\n                openHours: [\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"10:00\"],\r\n                closeHours:[\"23:00\",\"23:00\",\"23:00\",\"23:00\",\"23:00\",\"22:00\",\"22:00\"]\r\n            },\r\n            acceptedPlans: [\"Galeno 300\", \"OSDE 4100\", \"Particular\"],\r\n            medicalStudies: [\"Allergy test\", \"ECG\", \"Consulta\"]\r\n        },\r\n        {\r\n            userId: 17,\r\n            name:\"Tennesse Institute of Traumatology & Introvertion\",\r\n            email:\"teinti@medtransfer.com\",\r\n            telephone:\"911212155\",\r\n            hours: {\r\n                //sun, mon, tue, wed, thr, fri, sat\r\n                openHours: [\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"10:00\"],\r\n                closeHours:[\"23:00\",\"23:00\",\"23:00\",\"23:00\",\"23:00\",\"22:00\",\"22:00\"]\r\n            },\r\n            acceptedPlans: [\"Galeno 300\", \"OSDE 4100\", \"Particular\"],\r\n            medicalStudies: [\"Allergy test\", \"ECG\", \"Consulta\"]\r\n        },\r\n        {\r\n            userId: 4,\r\n            name:\"Badobeep\",\r\n            email:\"fnf@medtransfer.com\",\r\n            telephone:\"911212155\",\r\n            hours: {\r\n                //sun, mon, tue, wed, thr, fri, sat\r\n                openHours: [\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"10:00\"],\r\n                closeHours:[\"23:00\",\"23:00\",\"23:00\",\"23:00\",\"23:00\",\"22:00\",\"22:00\"]\r\n            },\r\n            acceptedPlans: [\"Galeno 300\", \"OSDE 4100\", \"Particular\"],\r\n            medicalStudies: [\"Allergy test\", \"ECG\", \"Consulta\"]\r\n        },\r\n        {\r\n            userId: 18,\r\n            name:\"Prosigo a la meta\",\r\n            email:\"adl@medtransfer.com\",\r\n            telephone:\"911212155\",\r\n            hours: {\r\n                //sun, mon, tue, wed, thr, fri, sat\r\n                openHours: [\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"10:00\"],\r\n                closeHours:[\"23:00\",\"23:00\",\"23:00\",\"23:00\",\"23:00\",\"22:00\",\"22:00\"]\r\n            },\r\n            acceptedPlans: [\"Galeno 300\", \"OSDE 4100\", \"Particular\"],\r\n            medicalStudies: [\"Allergy test\", \"ECG\", \"Consulta\"]\r\n        },\r\n        {\r\n            userId: 26,\r\n            name:\"yo mismo no pretendo\",\r\n            email:\"ocl@medtransfer.com\",\r\n            telephone:\"911212155\",\r\n            hours: {\r\n                //sun, mon, tue, wed, thr, fri, sat\r\n                openHours: [\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"10:00\"],\r\n                closeHours:[\"23:00\",\"23:00\",\"23:00\",\"23:00\",\"23:00\",\"22:00\",\"22:00\"]\r\n            },\r\n            acceptedPlans: [\"Galeno 300\", \"OSDE 4100\", \"Particular\"],\r\n            medicalStudies: [\"Allergy test\", \"ECG\", \"Consulta\"]\r\n        },\r\n        {\r\n            userId: 29,\r\n            name:\"Anisa Sanusi's Sanatory\",\r\n            email:\"ass@medtransfer.com\",\r\n            telephone:\"911212155\",\r\n            hours: {\r\n                //sun, mon, tue, wed, thr, fri, sat\r\n                openHours: [\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"10:00\"],\r\n                closeHours:[\"23:00\",\"23:00\",\"23:00\",\"23:00\",\"23:00\",\"22:00\",\"22:00\"]\r\n            },\r\n            acceptedPlans: [\"Galeno 300\", \"OSDE 4100\", \"Particular\"],\r\n            medicalStudies: [\"Allergy test\", \"ECG\", \"Consulta\"]\r\n        },\r\n        {\r\n            userId: 31,\r\n            name:\"Tennesse Institute of Traumatology & Introvertion\",\r\n            email:\"teinti@medtransfer.com\",\r\n            telephone:\"911212155\",\r\n            hours: {\r\n                //sun, mon, tue, wed, thr, fri, sat\r\n                openHours: [\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"10:00\"],\r\n                closeHours:[\"23:00\",\"23:00\",\"23:00\",\"23:00\",\"23:00\",\"22:00\",\"22:00\"]\r\n            },\r\n            acceptedPlans: [\"Galeno 300\", \"OSDE 4100\", \"Particular\"],\r\n            medicalStudies: [\"Allergy test\", \"ECG\", \"Consulta\"]\r\n        },\r\n        {\r\n            userId: 34,\r\n            name:\"Badobeep\",\r\n            email:\"fnf@medtransfer.com\",\r\n            telephone:\"911212155\",\r\n            hours: {\r\n                //sun, mon, tue, wed, thr, fri, sat\r\n                openHours: [\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"10:00\"],\r\n                closeHours:[\"23:00\",\"23:00\",\"23:00\",\"23:00\",\"23:00\",\"22:00\",\"22:00\"]\r\n            },\r\n            acceptedPlans: [\"Galeno 300\", \"OSDE 4100\", \"Particular\"],\r\n            medicalStudies: [\"Allergy test\", \"ECG\", \"Consulta\"]\r\n        },\r\n        {\r\n            userId: 48,\r\n            name:\"Prosigo a la meta\",\r\n            email:\"adl@medtransfer.com\",\r\n            telephone:\"911212155\",\r\n            hours: {\r\n                //sun, mon, tue, wed, thr, fri, sat\r\n                openHours: [\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"10:00\"],\r\n                closeHours:[\"23:00\",\"23:00\",\"23:00\",\"23:00\",\"23:00\",\"22:00\",\"22:00\"]\r\n            },\r\n            acceptedPlans: [\"Galeno 300\", \"OSDE 4100\", \"Particular\"],\r\n            medicalStudies: [\"Allergy test\", \"ECG\", \"Consulta\"]\r\n        },\r\n        {\r\n            userId: 46,\r\n            name:\"yo mismo no pretendo\",\r\n            email:\"ocl@medtransfer.com\",\r\n            telephone:\"911212155\",\r\n            hours: {\r\n                //sun, mon, tue, wed, thr, fri, sat\r\n                openHours: [\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"9:00\",\"10:00\"],\r\n                closeHours:[\"23:00\",\"23:00\",\"23:00\",\"23:00\",\"23:00\",\"22:00\",\"22:00\"]\r\n            },\r\n            acceptedPlans: [\"Galeno 300\", \"OSDE 4100\", \"Particular\"],\r\n            medicalStudies: [\"Allergy test\", \"ECG\", \"Consulta\"]\r\n        },\r\n    ];\r\n    */\r\n    const daysOfTheWeek = [\r\n        {name:\"Sunday\", id: 0},\r\n        {name:\"Monday\", id: 1},\r\n        {name:\"Tuesday\", id: 2},\r\n        {name:\"Wednesday\", id: 3},\r\n        {name:\"Thursday\", id: 4},\r\n        {name:\"Friday\", id: 5},\r\n        {name:\"Saturday\", id: 6}\r\n    ];\r\n    const insurancePlans = [\r\n        {name:'None (insert SS number)'},\r\n        {name:'Galeno Azul'},\r\n        {name:'OSDE 4200'},\r\n        {name:'Brook 9100'},\r\n        {name:'OSDE'}\r\n    ];\r\n\r\n\r\n\r\n\r\n\r\n    const [orderInfo, setOrderInfo] = useState({\r\n        medicName: '',\r\n        patientName: '',\r\n        patientEmail: '',\r\n        clinicId: '',\r\n        patientInsurancePlan: '',\r\n        patientInsuranceNumber: '',\r\n        studyType: '',\r\n        orderDescription:'',\r\n        medicLicenceNumber: '',\r\n        medicEmail: '',\r\n        identificationSrc: '',\r\n    });\r\n\r\n    const [studyTypes, setStudyTypes] = useState([{name:'empty', id: -1}]);\r\n\r\n    //used for parsing and sending queries to API\r\n    const [searchFilters, setSearchFilters] = useState({\r\n        clinicName: '',\r\n        plan: '',\r\n        studyType: '',\r\n        days: new Array(7),\r\n        fromTime: new Array(7),\r\n        toTime: new Array(7)\r\n        /*availability: [\r\n            {day: 0, 'from-time': '', 'to-time': ''},\r\n        ]*/\r\n    });\r\n\r\n    //used for saving the filters' states for the frontend\r\n    const [searchInputs, setSearchInputs] = useState({\r\n        clinicName: '',\r\n        insurancePlan: '',\r\n        studyType: '',\r\n        schedule: [\r\n            {day:0, checked: false, fromTime: '', toTime: ''},\r\n            {day:1, checked: false, fromTime: '', toTime: ''},\r\n            {day:2, checked: false, fromTime: '', toTime: ''},\r\n            {day:3, checked: false, fromTime: '', toTime: ''},\r\n            {day:4, checked: false, fromTime: '', toTime: ''},\r\n            {day:5, checked: false, fromTime: '', toTime: ''},\r\n            {day:6, checked: false, fromTime: '', toTime: ''}\r\n        ]\r\n    })\r\n\r\n    const [clinicsList, setClinicsList] = useState([{userId: 0, name: ''}])\r\n\r\n    const getCurrentDate = () => {\r\n        let today = new Date();\r\n        return today.toDateString();\r\n    };\r\n\r\n\r\n    /*******************************\r\n    **STEPPER STATES\r\n    *******************************/\r\n\r\n    //states used to know which step to show\r\n    const [activeOrderStep, setActiveOrderStep] = useState(\"active\");\r\n    const [activeClinicStep, setActiveClinicStep] = useState(\"\");\r\n    const [activeVerifyStep, setActiveVerifyStep] = useState(\"\");\r\n\r\n    const [orderStep, setOrderStep] = useState(\"show active\");\r\n    const [clinicStep, setClinicStep] = useState(\"\");\r\n    const [verifyStep, setVerifyStep] = useState(\"\");\r\n\r\n    const changeToOrderInfoStep = (event) => {\r\n        setOrderStep(\"show active\");\r\n        setActiveOrderStep(\"active\");\r\n\r\n        setClinicStep(\"\");\r\n        setActiveClinicStep(\"\");\r\n\r\n        setVerifyStep(\"\");\r\n        setActiveVerifyStep(\"\")\r\n    }\r\n\r\n    const changeToClinicStep = (event) => {\r\n        setClinicStep(\"show active\");\r\n        setActiveClinicStep(\"active\");\r\n\r\n        setOrderStep(\"\");\r\n        setActiveOrderStep(\"\");\r\n\r\n        setVerifyStep(\"\");\r\n        setActiveVerifyStep(\"\")\r\n    }\r\n\r\n    const changeToVerifyStep = (event) => {\r\n        setVerifyStep(\"show active\");\r\n        setActiveVerifyStep(\"active\");\r\n\r\n        setOrderStep(\"\");\r\n        setActiveOrderStep(\"\");\r\n\r\n        setClinicStep(\"\");\r\n        setActiveClinicStep(\"\")\r\n    }\r\n\r\n\r\n    /*******************************\r\n    **QUERIES\r\n    *******************************/\r\n\r\n    //used for calling the medic's info\r\n    const [query, setQuery] = useState(\"redux\");\r\n    const [data, setData] = useState(null); //test if i'm not making a mistake\r\n    const [count, setCount] = useState(1);\r\n\r\n    useEffect(async () => {\r\n        const fetchData = async () => {\r\n            await GetLoggedMedic(orderInfo, setOrderInfo, count, setCount);\r\n            await GetStudyTypes(setStudyTypes, count, setCount);\r\n        };\r\n\r\n        fetchData();\r\n    }, [, query]);\r\n\r\n\r\n    const [patientInfo, setPatientInfo] = useState({\r\n        name: '',\r\n        email: '',\r\n        insurance: {\r\n            number: '',\r\n            plan: ''\r\n        },\r\n        error: false,\r\n        loading: false\r\n    })\r\n    const lookUpPatientByEmail = (event) => {\r\n        let patientEmail = event.target.value;\r\n        let aux = patientInfo;\r\n        aux.loading = true;\r\n        setPatientInfo(aux)\r\n        setCount(count+1);\r\n        FindPatient(patientEmail, count, setCount, aux, setPatientInfo);\r\n        //uhhhh\r\n    }\r\n\r\n\r\n\r\n\r\n    const closePatientInfoAlert = () => {\r\n        let pat = patientInfo;\r\n        pat.error = false;\r\n        setPatientInfo(pat);\r\n        setCount(count +1);\r\n    }\r\n\r\n    //schedule availability modal\r\n    const [show, setShow] = useState(false);\r\n\r\n    //show selected clinic\r\n    const [selectedClinic, setSelectedClinic] = useState(null);\r\n    const selectClinic = (listItem) => { setSelectedClinic(listItem);};\r\n\r\n    //controls/values for pagination of clinics search\r\n    const [totalClinicPages, setTotalClinicPages] = useState(7);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n\r\n    const [clinicSearchValidated, setClinicSearchValidated] = useState(false);\r\n    //search clinics call\r\n    const searchClinics = (event) => {\r\n        let inputs =searchFilters;\r\n\r\n        inputs.studyType = orderInfo.studyType;\r\n        inputs.clinicName = '';\r\n        inputs.plan = orderInfo.patientInsurancePlan\r\n        inputs.days.fill(0);\r\n        inputs.fromTime.fill(0);\r\n        inputs.toTime.fill(0);\r\n\r\n        setSearchFilters(inputs);\r\n\r\n        event.preventDefault();\r\n        const form = event.target;\r\n\r\n        //MISSING: checking that closing time > opening time\r\n        if(form.checkValidity() === false){\r\n            event.stopPropagation();\r\n        }else{\r\n            let searchInputsAux = searchInputs;\r\n            searchInputsAux.clinicName = event.target[0].value;\r\n            inputs.clinicName = searchInputsAux.clinicName;\r\n\r\n            searchInputsAux.studyType = orderInfo.studyType;\r\n            inputs.studyType = searchInputsAux.studyType;\r\n\r\n            if(event.target[1].value !== orderInfo.patientInsurancePlan){\r\n                searchInputsAux.insurancePlan = event.target[1].value;\r\n                inputs.plan = searchInputsAux.insurancePlan;\r\n\r\n                let aux = orderInfo;\r\n                aux.patientInsurancePlan = inputs.plan;\r\n                setOrderInfo(orderInfo);\r\n            }\r\n\r\n            for(let idx=1; idx <= 7; idx++){\r\n                //suceciones... what a concept\r\n                searchInputsAux.schedule[idx-1].checked = event.target[1+(3*idx)].checked;\r\n                searchInputsAux.schedule[idx-1].fromTime = event.target[2+(3*idx)].value;\r\n                searchInputsAux.schedule[idx-1].toTime = event.target[3+(3*idx)].value;\r\n\r\n                if(searchInputsAux.schedule[idx-1].checked === true){\r\n                    inputs.days[idx-1] = 1;\r\n                    inputs.fromTime[idx-1] = searchInputsAux.schedule[idx-1].fromTime;\r\n                    inputs.toTime[idx-1] = searchInputsAux.schedule[idx-1].toTime;\r\n                }\r\n            }\r\n\r\n            setSearchInputs(searchInputsAux);\r\n            //console.log(\"searchInputsAux (up to date)\", searchInputs);\r\n\r\n            setSearchFilters(inputs);\r\n            //console.log(\"searchFilters (late?)\", searchFilters);\r\n\r\n            //will always search/fetch for page 1\r\n            QueryClinics(searchFilters, setClinicsList, count, setCount, 1, setTotalClinicPages);\r\n        }\r\n\r\n        setClinicSearchValidated(true);\r\n\r\n        /////in case you need to know how to read the form from the event prop:\r\n        /////\r\n        //event.target[0] -> clinicName\r\n        ///event.target[1] -> insurancePlan\r\n        //---\r\n        //for 0:N:6\r\n        //event.target[4+N] -> isAvailableN\r\n        //event.target[4+1+N] -> day-N-ot\r\n        //event.target[4+2+N] -> day-N-ct\r\n    };\r\n\r\n    const changePageAndFetch = (pageNumber) => {\r\n        //will fetch clinics based on the already picked filters\r\n        //only will change the currentPage value (and might update totalClinicPages if the fetch comes up with a different value for that)\r\n        QueryClinics(searchFilters, setClinicsList, count, setCount, pageNumber, setTotalClinicPages);\r\n        setCurrentPage(pageNumber);\r\n    };\r\n\r\n\r\n    /*******************************\r\n    **CUSTOM COMPONENTS\r\n    *******************************/\r\n    //components built based on API data\r\n    const PaginationCustom = (props) => {\r\n        let active = props.current;\r\n\r\n        return(\r\n            <div className=\"row justify-content-center\">\r\n                <Pagination>\r\n                    {active -1 > 0 ? <Pagination.Prev onClick={() => changePageAndFetch(active - 1)}/> : <Pagination.Prev disabled/>}\r\n                    <Pagination.Item active>{active}</Pagination.Item>\r\n                    {active + 1 <= props.total ?  <Pagination.Next onClick={() => changePageAndFetch(active + 1)}/> : <Pagination.Next disabled/>}\r\n                </Pagination>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const Item = (props) => {\r\n        return(\r\n            <li class=\"nav-item\" key={props.clinic.name}>\r\n                <a\r\n                    id={props.clinic.userId} onClick={() =>{selectClinic(props.clinic)}}\r\n                    className=\"list-group-item list-group-item-action\"\r\n                    data-toggle=\"tab\" role=\"tab\"\r\n                    aria-controls={\"clinic_\" + props.clinic.userId} aria-selected=\"false\"\r\n                >\r\n                    <div className=\"justify-content-between\">\r\n                        <h5 className=\"mb-1\">{props.clinic.name}</h5>\r\n                    </div>\r\n                </a>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    const ClinicInfo = (props) => {\r\n        return(\r\n            <div\r\n                className=\"tab-pane tab-result\"\r\n                key={\"clinicInfo_\" + props.item.userId}\r\n            >\r\n                <h3>{props.item.name}</h3>\r\n                <Table className=\"table table-borderless\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Email</td>\r\n                            <td className=\"output\">{props.item.email}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Telephone</td>\r\n                            <td className=\"output\">{props.item.telephone}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Open hours</td>\r\n                            <td>\r\n                                {props.item.hours.map((piano) => (\r\n                                    <div key={\"oh_\"+props.item.userId+\"_\"+piano.day}>\r\n                                        <span>{daysOfTheWeek[piano.day].name}</span>&nbsp;&nbsp;&nbsp;\r\n                                        <span>{piano.openTime + \" - \" + piano.closeTime}</span>\r\n                                    </div>\r\n                                ))}\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Accepted insurance</td>\r\n                            <td className=\"output\">\r\n                                {props.item.acceptedPlans.map((pico) => (\r\n                                    <span\r\n                                        key={\"plan_\"+props.item.userId+\"_\"+pico.plan}\r\n                                        className=\"badge-sm badge-pill badge-secondary mr-1 d-inline-block\"\r\n                                    >{pico.plan}</span>\r\n                                ))}\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Available studies</td>\r\n                            <td className=\"output\">\r\n                                {props.item.medicalStudies.map((study) => (\r\n                                    <p key={\"study_\"+props.item.userId+\"_\"+study.name}>{study.name}</p>\r\n                                ))}\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const Day = (props) => {\r\n        return (\r\n            <tr>\r\n                <th>{props.item.name}</th>\r\n                <th>\r\n                    <Form.Group controlId={\"isAvailable\" + props.item.id}>\r\n                        <Form.Control defaultChecked={searchInputs.schedule[props.item.id].checked}\r\n                            type=\"checkbox\" name={\"isAvailable\" + props.item.id}\r\n                        />\r\n                    </Form.Group>\r\n                </th>\r\n                <th>\r\n                    <Form.Group controlId={\"day-\" + props.item.id + \"-ot\"}>\r\n                        <Form.Control\r\n                            type=\"time\" className=\"form-control time-input\"\r\n                            placeholder=\"00:00\" maxLength=\"5\"\r\n                            name={\"day-\" + props.item.id + \"-ot\"}\r\n                            defaultValue={searchInputs.schedule[props.item.id].fromTime}\r\n                            pattern=\"[0-9]{2}:[0-9]{2}\"\r\n                        />\r\n                    </Form.Group>\r\n                </th>\r\n                <th>\r\n                    <Form.Group controlId={\"day-\" + props.item.id + \"-ct\"}>\r\n                        <Form.Control\r\n                            type=\"time\" className=\"form-control time-input\"\r\n                            placeholder=\"00:00\" maxLength=\"5\"\r\n                            name={\"day-\" + props.item.id + \"-ct\"}\r\n                            defaultValue={searchInputs.schedule[props.item.id].toTime}\r\n                            pattern=\"[0-9]{2}:[0-9]{2}\"\r\n                        />\r\n                    </Form.Group>\r\n                </th>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n\r\n\r\n    /*******************************\r\n    **CLIENT-SIDE FORM VALIDATION\r\n    *******************************/\r\n    //step 1 (order info) form validation\r\n    const [infoValidated, setInfoValidated] = useState(false);\r\n    const handleInfoSubmit = (event) => {\r\n        event.preventDefault();\r\n        const form = event.currentTarget;\r\n\r\n        if(form.checkValidity() === false){\r\n            event.stopPropagation();\r\n        }else{\r\n            let aux = orderInfo;\r\n            aux.patientEmail = event.target[1].value;\r\n            aux.patientName = event.target[2].value;\r\n            aux.patientInsurancePlan = event.target[3].value;\r\n            aux.patientInsuranceNumber = event.target[4].value;\r\n            aux.studyType = event.target[5].value;\r\n            aux.orderDescription = event.target[6].value;\r\n            setOrderInfo(aux);\r\n\r\n            let searchInputsAux = searchInputs;\r\n            searchInputsAux.insurancePlan = orderInfo.patientInsurancePlan;\r\n            searchInputsAux.studyType = orderInfo.studyType;\r\n            setSearchInputs(searchInputsAux)\r\n\r\n            QueryClinics({plan: orderInfo.patientInsurancePlan, studyType: orderInfo.studyType, clinicName: \"\"}, setClinicsList, count, setCount, 1, setTotalClinicPages);\r\n            changeToClinicStep();\r\n        }\r\n\r\n        setInfoValidated(true);\r\n    };\r\n\r\n    //step 2 (clinic select) form validation\r\n    const [clinicValidated, setClinicValidated] = useState(false);\r\n    const handleClinicSubmit = (event) => {\r\n        event.preventDefault();\r\n        const form = event.currentTarget;\r\n\r\n        if(form.checkValidity() === false || selectedClinic === null){\r\n            event.stopPropagation();\r\n        }else{\r\n            let aux = orderInfo;\r\n            aux.clinicId = selectedClinic.userId;\r\n            setOrderInfo(aux);\r\n\r\n            changeToVerifyStep();\r\n        }\r\n\r\n        setClinicValidated(true);\r\n    };\r\n\r\n    //step 3 (verify and submit) form validation\r\n    const [verifyValidated, setVerifyValidated] = useState(false);\r\n    const handleVerifySubmit = (event) => {\r\n        event.preventDefault();\r\n        const form = event.currentTarget;\r\n\r\n        if(form.checkValidity() === false){\r\n            event.stopPropagation();\r\n        }else{\r\n            let aux = orderInfo;\r\n            let idx = studyTypes.findIndex(s => s.name === aux.studyType);\r\n            if(idx !== -1){\r\n                aux.studyTypeId = studyTypes[idx].id;\r\n                setOrderInfo(aux);\r\n            }\r\n            CreateMedicalOrder(orderInfo);\r\n            //now it should send the order to the API and redirect the user to /view-study\r\n        }\r\n\r\n        setVerifyValidated(true);\r\n    };\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"row justify-content-center\" key={\"create-order_\"+ count}>\r\n            <div className={\"card form-card \" + (activeClinicStep === \"active\" ? \"clinic\" : \"\")}>\r\n\r\n                <div className=\"stepper-wrapper-horizontal\">\r\n                    <div className=\"step-wrapper\">\r\n                        <div className={\"step-number \" + activeOrderStep}>1</div>\r\n                        <div className={\"step-description text-center \" + activeOrderStep}>Create a new medical order</div>\r\n                        <div className=\"divider-line\"></div>\r\n                    </div>\r\n                    <div className=\"step-wrapper\">\r\n                        <div className={\"step-number \" + activeClinicStep}>2</div>\r\n                        <div className={\"step-description text-center \" + activeClinicStep}>Select clinic</div>\r\n                        <div className=\"divider-line\"></div>\r\n                    </div>\r\n                    <div className=\"step-wrapper\">\r\n                        <div className={\"step-number \" + activeVerifyStep}>3</div>\r\n                        <div className={\"step-description text-center \" + activeVerifyStep}>Submit medical order</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <hr className=\"divider spacer\"/>\r\n                </div>\r\n\r\n\r\n                <div className=\"tab-content mt-9\">\r\n                    <div id=\"info-form\" className={\"custom-form tab-pane fade in \" + orderStep}>\r\n                            <Form noValidate validated={infoValidated} onSubmit={handleInfoSubmit}>\r\n                                <Form.Group>\r\n                                    <Form.Label className=\"text-muted\">Medic</Form.Label>\r\n                                    <p className=\"lead mb-0\">{orderInfo.medicName}</p>\r\n                                    <Form.Control\r\n                                            required type=\"text\"\r\n                                            name=\"medicName\" readOnly=\"true\"\r\n                                            value={orderInfo.medicName}\r\n                                            className=\"custom-hidden\"\r\n                                    />\r\n                                </Form.Group>\r\n                                <hr className=\"divider mt-0\"/>\r\n                                <div className=\"justify-content-center\">\r\n                                    <Alert show={patientInfo.error} variant=\"warning\">\r\n                                        <div className=\"d-flex justify-content-between\">\r\n                                        <span className=\"my-2\">\r\n                                            Sorry, we couldn't find this email in our patients' database.\r\n\r\n                                        </span>\r\n                                        <Button\r\n                                            variant=\"outline-warning\"\r\n                                            onClick={() => {closePatientInfoAlert()}}\r\n                                        >\r\n                                            Close\r\n                                        </Button>\r\n                                        </div>\r\n\r\n                                    </Alert>\r\n                                </div>\r\n                                <div className=\"row mx-1\">\r\n                                    <Form.Group className=\"form-group col\" controlId=\"patientEmail\">\r\n                                        <Form.Label className=\"bmd-label-floating\">Patient's email</Form.Label>\r\n                                        <Form.Control\r\n                                            required type=\"email\"\r\n                                            name=\"patientEmail\"\r\n                                            defaultValue={patientInfo.email}\r\n                                            onBlur={(e) => {lookUpPatientByEmail(e);}}\r\n                                        />\r\n                                        {patientInfo.loading ?\r\n                                        <Spinner\r\n                                            as=\"span\" variant=\"primary\"\r\n                                            animation=\"border\"\r\n                                            size=\"sm\" role=\"status\"\r\n                                        /> : <></>}\r\n\r\n                                        <Form.Control.Feedback type=\"invalid\">Please input a valid email address</Form.Control.Feedback>\r\n                                    </Form.Group>\r\n                                </div>\r\n\r\n                                <div className=\"row mx-1\">\r\n                                    <Form.Group className=\"form-group col\" controlId=\"patientName\">\r\n                                        <Form.Label className=\"bmd-label-floating\">Patient's name</Form.Label>\r\n                                        <Form.Control\r\n                                            required type=\"text\"\r\n                                            name=\"patientName\"\r\n                                            defaultValue={patientInfo.name}\r\n                                        />\r\n                                        <Form.Control.Feedback type=\"invalid\">Please write the patient's name</Form.Control.Feedback>\r\n                                    </Form.Group>\r\n                                </div>\r\n                                <div className=\"row mx-1\">\r\n                                    <Form.Group className=\"form-group col\" controlId=\"patientInsurancePlan\">\r\n                                        <Form.Label className=\"bmd-label-floating\">Patient's insurance plan</Form.Label>\r\n                                        <Form.Control\r\n                                            required as=\"select\"\r\n                                            name=\"patientInsurancePlan\"\r\n                                        >\r\n                                            {insurancePlans.map((item) => (\r\n                                                <option selected={item.name === patientInfo.insurance.plan}>{item.name}</option>\r\n                                            ))}\r\n                                        </Form.Control>\r\n                                        <Form.Control.Feedback type=\"invalid\">Please select an insurance plan</Form.Control.Feedback>\r\n                                    </Form.Group>\r\n                                    <Form.Group className=\"form-group col\" controlId=\"patientInsuranceNumber\">\r\n                                        <Form.Label className=\"bmd-label-floating\">Patient's insurance number</Form.Label>\r\n                                        <Form.Control\r\n                                            required type=\"text\"\r\n                                            name=\"patientInsuranceNumber\"\r\n                                            className=\"mt-2\"\r\n                                            defaultValue={patientInfo.insurance.number}\r\n                                        />\r\n                                        <Form.Control.Feedback type=\"invalid\">Please enter the patient's insurance number</Form.Control.Feedback>\r\n                                    </Form.Group>\r\n                                </div>\r\n                                <hr className=\"mt-3 mb-2\"/>\r\n                                <div className=\"row mx-1\">\r\n                                    <div className=\"col\">\r\n                                        <Form.Group className=\"form-group\" controlId=\"studyType\">\r\n                                            <Form.Label className=\"bmd-label-static\">Study type</Form.Label>\r\n                                            <Form.Control\r\n                                                required as=\"select\"\r\n                                                name=\"studyType\"\r\n                                                placeholder=\"Pick a study type\"\r\n                                            >\r\n                                                {studyTypes.map((item) => (\r\n                                                    <option>{item.name}</option>\r\n                                                ))}\r\n                                            </Form.Control>\r\n                                            <Form.Control.Feedback type=\"invalid\">Please pick a study type</Form.Control.Feedback>\r\n                                        </Form.Group>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col\">\r\n                                    <Form.Group controlId=\"orderDescription\">\r\n                                        <Form.Label className=\"bmd-label-static\">Order description</Form.Label>\r\n                                        <textarea\r\n                                            type=\"text\"\r\n                                            name=\"orderDescription\"\r\n                                            rows=\"10\" className=\"form-control area-custom\"\r\n                                        />\r\n                                        <Form.Control.Feedback type=\"invalid\">interesting...</Form.Control.Feedback>\r\n                                    </Form.Group>\r\n                                </div>\r\n                                <hr className=\"mt-3 mb-2\"/>\r\n\r\n                                <a onClick={history.goBack} className=\"btn btn-secondary mt-4 mb-4 float-left\" role=\"button\">Cancel</a>\r\n\r\n                                <Button className=\"create-btn mt-4 mb-2 float-right\"\r\n                                    type=\"submit\" name=\"infoSubmit\"\r\n                                    value={infoSubmit}\r\n                                >Next</Button>\r\n                            </Form>\r\n                    </div>\r\n\r\n                    <div id=\"clinic-form\" className={\"custom-form tab-pane fade in \" + clinicStep}>\r\n                        <Form noValidate validated={clinicSearchValidated} onSubmit={searchClinics}>\r\n                            <div className=\"search-block\">\r\n                                <div className=\"row mx-1 pt-2\">\r\n                                    <Form.Group className=\"form-group col mt-1\" controlId=\"clinicName\">\r\n                                        <Form.Label className=\"bmd-label-static\">Search by clinic name</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\" style={{paddingTop: \"10px\"}}\r\n                                            name=\"clinicName\" defaultValue={searchInputs.clinicName}\r\n                                        />\r\n                                    </Form.Group>\r\n                                    <Form.Group className=\"form-group col\" controlId=\"insurancePlan\">\r\n                                        <Form.Label className=\"bmd-label-static\">Search by insurance plan</Form.Label>\r\n                                        <Form.Control\r\n                                            as=\"select\"\r\n                                            name=\"insurancePlan\"\r\n                                        >\r\n                                            {insurancePlans.map((item) => (\r\n                                                <option selected={item.name === searchInputs.insurancePlan}>{item.name}</option>\r\n                                            ))}\r\n                                        </Form.Control>\r\n                                    </Form.Group>\r\n\r\n                                </div>\r\n                                <div className=\"row mx-1\">\r\n                                    <Button\r\n                                        className=\"clinic-btn mx-auto\"\r\n                                        variant=\"primary\"\r\n                                        onClick={() => {setShow(!show);}}\r\n                                    >\r\n                                        {\"Schedule availability \"}\r\n                                        {show===false? <i className=\"fas fa-chevron-down ml-2\"/> : <i className=\"fas fa-chevron-up ml-2\"/>}\r\n                                    </Button>\r\n                                    <Button\r\n                                        className=\"clinic-btn search-btn mx-auto\"\r\n                                        type=\"submit\" name=\"clinicSearchSubmit\"\r\n                                        value=\"search this\"\r\n                                    >\r\n                                        Search\r\n                                    </Button>\r\n                                </div>\r\n                                <div className=\"row mx-1 justify-content-center\">\r\n                                    <Collapse in={show}>\r\n                                        <div style={{width: \"100%\"}}>\r\n                                            <Table\r\n                                                striped bordered hover\r\n                                                className=\"custom-table\"\r\n                                            >\r\n                                                <thead>\r\n                                                    <tr>\r\n                                                        <th>Day</th>\r\n                                                        <th>Available</th>\r\n                                                        <th>From</th>\r\n                                                        <th>To</th>\r\n                                                    </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                    {daysOfTheWeek.map((item) => (\r\n                                                        <Day key={item.id} item={item} />\r\n                                                    ))}\r\n                                                </tbody>\r\n                                            </Table>\r\n                                        </div>\r\n                                    </Collapse>\r\n                                </div>\r\n                            </div>\r\n                        </Form>\r\n\r\n                        <Form noValidate validated={clinicValidated} onSubmit={handleClinicSubmit}>\r\n                            <div className=\"card results-card mt-5\">\r\n                                <div className=\"card-body\">\r\n                                    <p className=\"card-title h4\">Results</p>\r\n                                    <hr/>\r\n                                    <div className=\"d-flex flex-row\">\r\n                                        <div id=\"results\" className=\"list-group result-section\">\r\n                                            {clinicsList.length === 0 ? <h3 className=\"text-center py-5 lead\">No clinics found based on search filters</h3>\r\n                                            :\r\n                                            <ul className=\"nav flex-column\" id=\"myTab\" role=\"tablist\">\r\n                                            {clinicsList.map((item) => (\r\n                                                <Item key={item.userId} clinic={item}/>\r\n                                            ))}\r\n                                            </ul>\r\n                                            }\r\n                                            {totalClinicPages > 1 ? <PaginationCustom current={currentPage} total={totalClinicPages} /> : <></>}\r\n\r\n                                        </div>\r\n                                        <div id=\"data\" className=\"data-section\">\r\n                                            <h5 class=\"text-muted\">Selected Clinic</h5>\r\n                                            <div className=\"\">\r\n                                                {selectedClinic === null ? <h4>No clinic selected</h4> : <ClinicInfo key={\"selected_\" + selectedClinic.userId} item={selectedClinic}/>}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <a onClick={changeToOrderInfoStep} className=\"btn btn-secondary mt-4 mb-4 float-left\" role=\"button\">Back</a>\r\n                            <Button className=\"create-btn mt-4 mb-2 float-right\"\r\n                                    type=\"submit\" name=\"clinicSubmit\"\r\n                                    value={clinicSubmit}\r\n                            >Next</Button>\r\n                        </Form>\r\n                    </div>\r\n\r\n                    <div id=\"verify-form\" className={\"custom-form tab-pane fade in \" + verifyStep}>\r\n                        <Form noValidate validation={verifyValidated} onSubmit={handleVerifySubmit}>\r\n                            <div className=\"card\">\r\n                                <div className=\"card-body\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col\">\r\n                                            <p className=\"card-title ml-3 h4\">Medical order</p>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col\">\r\n                                            <p className=\"card-subtitle ml-3 text-muted lead\">Date: {getCurrentDate()}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                    <hr className=\"mt-3 mb-4\"/>\r\n                                    <div className=\"row justify-content-start\">\r\n                                        <div className=\"col type\">\r\n                                            <p className=\"type-title\">Patient</p>\r\n                                            {orderInfo.patientName}\r\n                                        </div>\r\n                                        <div className=\"col type\">\r\n                                            <p className=\"type-title\">Medical Clinic</p>\r\n                                            {selectedClinic !== null ? selectedClinic.name : \"\"}\r\n                                        </div>\r\n                                        <div class=\"w-100\"></div>\r\n                                        <div className=\"col type\">\r\n                                            <p className=\"type-title\">Patient insurance plan</p>\r\n                                            {orderInfo.patientInsurancePlan}\r\n                                        </div>\r\n                                        <div className=\"col type\">\r\n                                            <p className=\"type-title\">Patient insurance number</p>\r\n                                            {orderInfo.patientInsuranceNumber}\r\n                                        </div>\r\n                                    </div>\r\n                                    <hr className=\"mt-3 mb-5\"/>\r\n                                    <p className=\"card-text text-center h5\">\r\n                                        Study type: {orderInfo.studyType}\r\n                                    </p>\r\n                                    <p className=\"card-text text-center\">{orderInfo.orderDescription}</p>\r\n                                    <hr className=\"mt-5 mb-4\"/>\r\n                                    <div className=\"media\">\r\n                                        <div className=\"media-body\">\r\n                                            <h5 className=\"mt-0 mb-1 text-center\">{orderInfo.medicName}</h5>\r\n                                            <p className=\"text-center\">M.N.: {orderInfo.medicLicenceNumber}</p>\r\n                                        </div>\r\n                                        <img\r\n                                            className=\"align-self-end ml-3 signature\"\r\n                                            alt=\"medic's signature\"\r\n                                            src={orderInfo.identificationSrc}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                            <a onClick={changeToClinicStep} className=\"btn btn-secondary mt-4 mb-4 float-left\" role=\"button\">Back</a>\r\n                            <Button className=\"create-btn mt-4 mb-2 float-right\"\r\n                                    type=\"submit\" name=\"verifySubmit\"\r\n                                    value={verifySubmit}\r\n                            >Submit order</Button>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default CreateOrder;","/mnt/d/Code/PAW/paw-2020b-2/frontend/src/constants/Routes.js",["171"],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/registration/MedicalFieldModal.js",[],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/redux/reducers/index.js",["172","173","174"],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/registration/InsurancePlanModal.js",[],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/registration/StudyTypesModal.js",[],"/mnt/d/Code/PAW/paw-2020b-2/frontend/src/components/inputs/ErrorFeedback.js",[],{"ruleId":"175","severity":1,"message":"176","line":8,"column":9,"nodeType":"177","messageId":"178","endLine":8,"endColumn":14},{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","replacedBy":"182"},{"ruleId":"179","replacedBy":"183"},{"ruleId":"181","replacedBy":"184"},{"ruleId":"175","severity":1,"message":"185","line":12,"column":11,"nodeType":"177","messageId":"178","endLine":12,"endColumn":19},{"ruleId":"179","replacedBy":"186"},{"ruleId":"181","replacedBy":"187"},{"ruleId":"175","severity":1,"message":"188","line":1,"column":9,"nodeType":"177","messageId":"178","endLine":1,"endColumn":17},{"ruleId":"175","severity":1,"message":"189","line":2,"column":8,"nodeType":"177","messageId":"178","endLine":2,"endColumn":13},{"ruleId":"179","replacedBy":"190"},{"ruleId":"181","replacedBy":"191"},{"ruleId":"175","severity":1,"message":"192","line":2,"column":22,"nodeType":"177","messageId":"178","endLine":2,"endColumn":32},{"ruleId":"175","severity":1,"message":"193","line":27,"column":11,"nodeType":"177","messageId":"178","endLine":27,"endColumn":20},{"ruleId":"175","severity":1,"message":"194","line":28,"column":11,"nodeType":"177","messageId":"178","endLine":28,"endColumn":23},{"ruleId":"175","severity":1,"message":"195","line":30,"column":11,"nodeType":"177","messageId":"178","endLine":30,"endColumn":18},{"ruleId":"175","severity":1,"message":"196","line":32,"column":11,"nodeType":"177","messageId":"178","endLine":32,"endColumn":19},{"ruleId":"179","replacedBy":"197"},{"ruleId":"181","replacedBy":"198"},{"ruleId":"175","severity":1,"message":"199","line":3,"column":9,"nodeType":"177","messageId":"178","endLine":3,"endColumn":19},{"ruleId":"179","replacedBy":"200"},{"ruleId":"181","replacedBy":"201"},{"ruleId":"179","replacedBy":"202"},{"ruleId":"181","replacedBy":"203"},{"ruleId":"179","replacedBy":"204"},{"ruleId":"181","replacedBy":"205"},{"ruleId":"175","severity":1,"message":"176","line":2,"column":9,"nodeType":"177","messageId":"178","endLine":2,"endColumn":14},{"ruleId":"175","severity":1,"message":"206","line":3,"column":9,"nodeType":"177","messageId":"178","endLine":3,"endColumn":21},{"ruleId":"175","severity":1,"message":"207","line":138,"column":9,"nodeType":"177","messageId":"178","endLine":138,"endColumn":15},{"ruleId":"208","severity":1,"message":"209","line":147,"column":34,"nodeType":"210","messageId":"211","endLine":147,"endColumn":35},{"ruleId":"175","severity":1,"message":"212","line":162,"column":13,"nodeType":"177","messageId":"178","endLine":162,"endColumn":16},{"ruleId":"175","severity":1,"message":"176","line":7,"column":10,"nodeType":"177","messageId":"178","endLine":7,"endColumn":15},{"ruleId":"175","severity":1,"message":"213","line":280,"column":19,"nodeType":"177","messageId":"178","endLine":280,"endColumn":27},{"ruleId":"175","severity":1,"message":"214","line":281,"column":12,"nodeType":"177","messageId":"178","endLine":281,"endColumn":16},{"ruleId":"175","severity":1,"message":"215","line":281,"column":18,"nodeType":"177","messageId":"178","endLine":281,"endColumn":25},{"ruleId":"216","severity":1,"message":"217","line":284,"column":15,"nodeType":"218","endLine":291,"endColumn":6},{"ruleId":"216","severity":1,"message":"219","line":291,"column":8,"nodeType":"220","endLine":291,"endColumn":17,"suggestions":"221"},{"ruleId":"222","severity":1,"message":"223","line":291,"column":8,"nodeType":"220","messageId":"224","endLine":291,"endColumn":17},{"ruleId":"225","severity":1,"message":"226","line":437,"column":17,"nodeType":"227","endLine":442,"endColumn":18},{"ruleId":"225","severity":1,"message":"226","line":762,"column":33,"nodeType":"227","endLine":762,"endColumn":126},{"ruleId":"225","severity":1,"message":"226","line":867,"column":29,"nodeType":"227","endLine":867,"endColumn":129},{"ruleId":"225","severity":1,"message":"226","line":929,"column":29,"nodeType":"227","endLine":929,"endColumn":126},{"ruleId":"175","severity":1,"message":"228","line":6,"column":9,"nodeType":"177","messageId":"178","endLine":6,"endColumn":14},{"ruleId":"175","severity":1,"message":"199","line":1,"column":32,"nodeType":"177","messageId":"178","endLine":1,"endColumn":42},{"ruleId":"175","severity":1,"message":"229","line":2,"column":9,"nodeType":"177","messageId":"178","endLine":2,"endColumn":14},{"ruleId":"175","severity":1,"message":"230","line":3,"column":9,"nodeType":"177","messageId":"178","endLine":3,"endColumn":12},"no-unused-vars","'store' is defined but never used.","Identifier","unusedVar","no-native-reassign",["231"],"no-negated-in-lhs",["232"],["231"],["232"],"'roleType' is assigned a value but never used.",["231"],["232"],"'useState' is defined but never used.","'axios' is defined but never used.",["231"],["232"],"'InputGroup' is defined but never used.","'loginLink' is assigned a value but never used.","'registerLink' is assigned a value but never used.","'history' is assigned a value but never used.","'dispatch' is assigned a value but never used.",["231"],["232"],"'StatusType' is defined but never used.",["231"],["232"],["231"],["232"],["231"],["232"],"'authenticate' is defined but never used.","'output' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'out' is assigned a value but never used.","'setQuery' is assigned a value but never used.","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'count' and 'orderInfo'. Either include them or remove the dependency array.","ArrayExpression",["233"],"no-sparse-arrays","Unexpected comma in middle of array.","unexpectedSparseArray","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Route' is defined but never used.","'Roles' is defined but never used.","'act' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"234","fix":"235"},"Update the dependencies array to be: [count, orderInfo, query]",{"range":"236","text":"237"},[10533,10542],"[count, orderInfo, query]"]